BIN         := globoid_live
REPO        := gitlab.globoi.com/globoid/globoid_live
BUILD       := $(shell git rev-parse --short HEAD)
VERSION     := $(shell git describe --tags $(shell git rev-list --tags --max-count=1))
MAKEFILE    := $(word $(words $(MAKEFILE_LIST)), $(MAKEFILE_LIST))
BASE_DIR    := $(shell cd $(dir $(MAKEFILE)); pwd)
ALLSOURCES  := $(shell find . -type f -name '*.go')
SOURCES     := $(shell find . -type f -name '*.go' ! -path '*Godeps/_workspace*')
COVER_OUT   := coverage.out
COVER_HTML  := coverage.html
PKG_COVER   := pkg.cover
GODEPS_DIR  := $(BASE_DIR)/Godeps
GODEPS_WRK  := $(GODEPS_DIR)/_workspace
LOCGOPATH   := $(GODEPS_WRK):$(GOPATH)
GODEPS_SRC  := $(GODEPS_WRK)/src
SYMLINK     := $(GODEPS_SRC)/$(REPO)
ECHO        := /bin/echo
MOCKGEN     := $(GOBIN)/mockgen
LINT        := $(GOBIN)/golint
GODEP       := $(GOBIN)/godep
GOTOOLDIR   := $(shell go env GOTOOLDIR)
VET         := $(GOTOOLDIR)/vet
COVER       := $(GOTOOLDIR)/cover
PKGS        := $(shell go list ./...)
CONFIG      := $(BASE_DIR)/conf/globoid_live.cfg
CONFIGTEMPL := $(BASE_DIR)/conf/globoid_live.cfg.unfiltered
LOCALHOSTRB := $(BASE_DIR)/config/deploy/localhost.rb


.PHONY: build
build: check_gopath $(BIN)


.PHONY: all
all: clean cover lint vet build


.PHONY: check_gopath
check_gopath:
ifndef GOPATH
	@echo "ERROR!! GOPATH must be declared. Check http://golang.org/doc/code.html#GOPATH"
	@exit 1
endif
ifeq ($(shell go list ./... | grep -q '^_'; echo $$?), 0)
	@echo "ERROR!! This directory should be at $(GOPATH)/src/$(REPO)"
	@exit 1
endif
	@exit 0


.PHONY: check_gobin
check_gobin:
ifndef GOBIN
	@echo "ERROR!! GOBIN must be declared. Check http://golang.org/doc/code.html#GOBIN"
	@exit 1
endif
	@exit 0


$(SYMLINK):
	@mkdir -p $(shell dirname $(SYMLINK))
	@ln -fs $(BASE_DIR) $(SYMLINK)


$(BIN): $(SYMLINK) $(ALLSOURCES) env
	@$(ECHO) "Building $(BIN) $(VERSION) $(BUILD)..."
	@GOPATH=$(LOCGOPATH) go build -ldflags "-X main.Build $(BUILD) -X main.Version $(VERSION)" -o $(BIN) $(REPO)


.PHONY: env
env:
	@$(ECHO) "Dumping Go environment vars..."
	@GOPATH=$(LOCGOPATH) go env


.PHONY: clean
clean: check_gopath
	@$(ECHO) "Removing temp files..."
	@rm -fv $(BIN) $(COVER_HTML) $(COVER_OUT) $(PKG_COVER)
	@rm -fv *.cover *.out
	@find . -name '.*.swp' -exec rm -fv {} \;
	@GOPATH=$(LOCGOPATH) go clean -v


.PHONY: test
test: $(SYMLINK) check_gopath
	@for pkg in $(PKGS); do \
		GOPATH=$(LOCGOPATH) go test -v -race $$pkg || exit 1; \
	done


.PHONY: cover
cover: $(SYMLINK) check_gopath $(COVER)
	@# "go test -coverprofile" doesn't support "./...": https://code.google.com/p/go/issues/detail?id=6909
	@echo Running tests with coverate report...
	@echo 'mode: set' > $(COVER_OUT)
	@touch $(PKG_COVER)
	@for pkg in $(PKGS); do \
		GOPATH=$(LOCGOPATH) go test -v -coverprofile=$(PKG_COVER) $$pkg || exit 1; \
		grep -v 'mode: set' $(PKG_COVER) >> $(COVER_OUT); \
	done
	@echo Generating HTML report in $(COVER_HTML)...
	@GOPATH=$(LOCGOPATH) go tool cover -html=$(COVER_OUT) -o $(COVER_HTML)
	@(which -s open && open $(COVER_HTML)) || (which -s gnome-open && gnome-open $(COVER_HTML)) || (exit 0)


.PHONY: DEVENV
DEVENV: $(GODEP) restore_deps $(GIN) $(MOCKGEN) $(LINT)


.PHONY: bundle
bundle: $(GODEP)
	@$(GODEP) save ./...


.PHONY: restore_deps
restore_deps: $(GODEP)
	@go get -v ./...
	@go get -t -v ./...
	@$(GODEP) restore


$(GODEP): check_gobin check_gopath
	@go get github.com/tools/godep


$(MOCKGEN): check_gobin check_gopath
	@go get code.google.com/p/gomock/mockgen


$(GIN): check_gopath check_gobin
	@go get github.com/codegangsta/gin


$(COVER): check_gopath check_gobin
	@go get golang.org/x/tools/cmd/cover || exit 0

$(VET): check_gopath check_gobin
	@go get golang.org/x/tools/cmd/vet || exit 0


$(LINT): check_gopath check_gobin
	@go get github.com/golang/lint/golint


.PHONY: run
run: $(BIN) $(CONFIG)
	@$(ECHO) "Starting $(BIN) with $(CONFIG)..."
	@./$(BIN) $(CONFIG)


$(CONFIG): $(LOCALHOSTRB) $(CONFIGTEMPL)
	@$(ECHO) "Generating config file ($(CONFIG))..."
	#@cap localhost deploy:filter


.PHONY: lint
lint: $(LINT)
	@for src in $(SOURCES); do \
		GOPATH=$(LOCGOPATH) golint $$src || exit 1; \
	done


.PHONY: vet
vet: check_gopath $(VET)
	@for src in $(SOURCES); do \
		GOPATH=$(LOCGOPATH) go tool vet $$src; \
	done


.PHONY: ab
ab:
	@$(ECHO) "Benchmarking $(BIN)..."
	sudo ab \
		-q \
		-r \
		-c 200 \
		-n 20000 \
		-H "Accept-Encoding: gzip,deflate,sdch" \
		-T "application/json" \
		-p scripts/benchmark.json \
		http://localhost:3080/2014-07-15/message
